{"version":3,"sources":["components/Header.js","components/SudokuGrid.js","components/MainWindow.js","components/RightBox.js","common/helper_functions.js","components/CalculateOptions.js","components/CalculateUniqueOptions.js","components/IsSolutionCorrect.js","components/Solver.js","components/CheckConstraints.js","components/BruteSolver.js","common/grid_templates.js","App.js","registerServiceWorker.js","index.js"],"names":["Header","className","Component","SudokuGrid","handleChange","bind","e","row","col","preventDefault","console","log","target","value","vert","horiz","test","this","props","updateGrid","newGrid","select","grid","Array","keys","map","maxLength","onClick","clickHandler","key","onChange","style","color","solved","MainWindow","checkSolutionMessage","checkSolution","RightBox","calcOptions","calcUniqueOptions","solveSol1","solveSol2","attemptFullSolve","bruteSolve","range","clone_deep","gridClone","push","get_row","rowIndex","slice","get_col","columnIndex","column","index","get_square","squareIndex","square","start","Math","floor","end","i","checkOptions","concatGrps","foundOptions","option","includes","CalculateOptions","options","colIndex","Number","sqr","concat","checkUniqueOptions","thisOptions","concatAllGrps","reduce","prev","curr","CalculateUniqueOptions","uniqueOptions","rowOptions_perRow","sqrIndex","rowOptions","colOptions","sqrOptions","splice","IsSolutionCorrect","checkRows","checkColumns","checkSquares","containsOneToNine","numbers","iterateSolution1","iterLeft","optionsGrid","updates","itemIndex","length","Object","iterateSolution2","uniqueOptionsGrid","CheckConstraints","checkRow","checkColumn","checkSquare","hasDuplicates","counts","undefined","isSolCorrect","constraints_met","BruteSolve","iterations","maxIterations","iterativelyFilledGrid","iterativeFill","table","Error","optionsForElement","filter","x","flat","checkGrid","returnedVal","recursivelyFillGrid","nextCoordinate","orig_grid","element","grid_templates","grid_empty","fill","grid_01","grid_02","grid_03","App","bruteSolver","BruteSolver","isSolutionCorrect","state","gridOptions","grid_id","setState","solve","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3953e4b0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <h1 className=\"title\">Sudoku!</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass SudokuGrid extends Component {\r\n  constructor() {\r\n    super();\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  //updates grid when user inputs value\r\n  handleChange(e, row, col) {\r\n    e.preventDefault();\r\n    console.log(e.target.value);\r\n    const vert = row;\r\n    const horiz = col;\r\n\r\n    let validChar = /^$|[1-9]/\r\n    if (validChar.test(e.target.value)) {\r\n      this.props.updateGrid(vert, horiz, e.target.value);\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.newGrid('grid_01');\r\n  }\r\n\r\n  clickHandler(e) {\r\n    e.target.select();\r\n  }\r\n\r\n  col(row, grid) {\r\n    return [...Array(9).keys()].map((col) => (\r\n      <textarea className=\"box\" maxLength=\"1\" onClick={this.clickHandler} key={`col-${col}`} value={grid[row*9 + col]} onChange={(e) => this.handleChange(e, row, col)} style={{ color: this.props.solved ? \"Green\" : \"\" }}></textarea>\r\n    ))\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.props;\r\n\r\n    return (\r\n      <div className=\"sudokuBoxContainer\">\r\n        <div className=\"sudokuBox\">\r\n          {[...Array(9).keys()].map((row) => (\r\n            <div className=\"row\" key={`row-${row}`}>\r\n              {this.col(row, grid)}\r\n            </div>\r\n          ))\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SudokuGrid;","import React, { Component } from 'react';\r\nimport SudokuGrid from './SudokuGrid';\r\n\r\nclass MainWindow extends Component {\r\n  render() {\r\n    let checkSolutionMessage;\r\n    if (this.props.solved) {\r\n      checkSolutionMessage = <p>Solution is Correct!</p>;\r\n    } else if (this.props.solved === false) {\r\n      checkSolutionMessage = <p>That's not a valid solution! :(</p>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"window\">\r\n        <SudokuGrid\r\n          grid={this.props.grid}\r\n          solved={this.props.solved}\r\n          newGrid={this.props.newGrid}\r\n          updateGrid={this.props.updateGrid}\r\n        />\r\n        <div className=\"grid-choices\">\r\n          <p>Scenarios:\r\n        <button onClick={() => this.props.newGrid()}>Empty Grid</button>\r\n            <button onClick={() => this.props.newGrid('grid_01')}>New Grid 01</button>\r\n            <button onClick={() => this.props.newGrid('grid_02')}>New Grid 02</button>\r\n            <button onClick={() => this.props.newGrid('grid_03')}>New Grid 03</button>\r\n          </p>\r\n        </div>\r\n        <div className=\"check-sol-button\">\r\n          <button onClick={() => this.props.checkSolution()}>Check Solution</button>\r\n          {checkSolutionMessage}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default MainWindow;\r\n","import React, { Component } from 'react';\r\n\r\nclass RightBox extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"rightBox\">\r\n        <p>Console Commands:\r\n          <button onClick={() => this.props.calcOptions()}>Calculate Options</button>\r\n          <button onClick={() => this.props.calcUniqueOptions()}>Calculate Unique Options</button>\r\n        </p>\r\n        <div>Depreciated Solution Methods\r\n          <div className=\"sol-1-buttons\">\r\n            <p>Method 1:\r\n              <button onClick={() => this.props.solveSol1()}>x1</button>\r\n              <button onClick={() => this.props.solveSol1(5)}>x5</button>\r\n              <button onClick={() => this.props.solveSol1(10)}>x10</button>\r\n            </p>\r\n          </div>\r\n          <div className=\"sol-2-buttons\">\r\n            <p>Method 2:\r\n              <button onClick={() => this.props.solveSol2()}>x1</button>\r\n              <button onClick={() => this.props.solveSol2(5)}>x5</button>\r\n              <button onClick={() => this.props.solveSol2(10)}>x10</button>\r\n            </p>\r\n          </div>\r\n          <div className=\"full-sol-button\">\r\n            <button onClick={() => this.props.attemptFullSolve(10)}>Attempt Full Solve (M1+2)</button>\r\n          </div>\r\n          <p>..............................\r\n          </p>\r\n        </div>\r\n        <div>Iterative Solver:\r\n          <div className=\"brute-sol-button\">\r\n            <p>TRY:</p>\r\n            <button onClick={() => this.props.bruteSolve()}>Brute Solve</button>\r\n          </div>\r\n        </div>\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\nexport default RightBox;\r\n","\r\nexport function clone_deep(grid) {\r\n    let gridClone = [];\r\n    for (let row of grid) {\r\n        gridClone.push([...row]);\r\n    }\r\n    return gridClone;\r\n}\r\n\r\nexport function get_row(grid, rowIndex) {\r\n    return grid.slice(rowIndex * 9, rowIndex * 9 + 9);\r\n}\r\n\r\nexport function get_col(grid, columnIndex) {\r\n    let column = []\r\n    for (let index = columnIndex; index < 81; index += 9) {\r\n        column.push(grid[index])\r\n    }\r\n    return column\r\n}\r\n\r\nexport function get_square(grid, squareIndex) {\r\n    const square = [];\r\n    for (let row = 0; row < 3; row++) {\r\n        let start = Math.floor(squareIndex / 3) * 27 + squareIndex % 3 * 3 + row * 9;\r\n        square.push(...grid.slice(start, start + 3));\r\n    }\r\n    return square\r\n}\r\n\r\nexport function* range(start, end) {\r\n    for (let i = start; i < end; i++) {\r\n        yield i;\r\n    }\r\n}","import { get_row, get_col, get_square, range} from '../common/helper_functions';\r\n\r\nexport function CalculateOptions(grid) {\r\n  const options = [];\r\n\r\n  for (let rowIndex of range(0,9)) {\r\n    let row = get_row(grid, rowIndex); // whole row\r\n\r\n    for (let colIndex of range(0, 9)) {\r\n      let index = Number(rowIndex) * 9 + Number(colIndex)\r\n      if (grid[index] === \"\") {\r\n        let col = get_col(grid, colIndex); // whole column\r\n        let sqIndex = Math.floor(rowIndex / 3) * 3 + Math.floor(colIndex / 3)\r\n        let sqr = get_square(grid, sqIndex); // whole square\r\n\r\n        let concatGrps = [].concat(row).concat(col).concat(sqr);\r\n\r\n        options[index] = checkOptions(concatGrps); //needs to be array of options\r\n\r\n      }\r\n      else {\r\n        options[index] = [];\r\n      }\r\n    }\r\n  };\r\n\r\n  return options;\r\n}\r\n\r\n// assumes possible values are 1 - 9\r\nfunction checkOptions(concatGrps) {\r\n  let possibleOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n  let foundOptions = [];\r\n\r\n  for (let option of possibleOptions) {\r\n    if (!concatGrps.includes(option)) {\r\n      foundOptions.push(option);\r\n    }\r\n  }\r\n  return foundOptions;\r\n}\r\n\r\nexport default CalculateOptions;\r\n","import { get_row, get_col, get_square, range } from '../common/helper_functions';\r\n\r\nexport function CalculateUniqueOptions(options) {\r\n  const uniqueOptions = [];\r\n\r\n  for (let rowIndex of range(0,9)) {\r\n    let rowOptions_perRow = get_row(options, rowIndex); // whole row\r\n\r\n    for (let colIndex of range(0, 9)) {\r\n      let index = rowIndex*9 + colIndex;\r\n\r\n      if (options[index] !== []) {\r\n        let sqrIndex = Math.floor(rowIndex / 3) * 3 + Math.floor(colIndex / 3)\r\n        \r\n        let rowOptions = [...rowOptions_perRow]; // copy of whole row\r\n        let colOptions = get_col(options, colIndex); // whole column\r\n        let sqrOptions = get_square(options,sqrIndex); // whole square\r\n\r\n        rowOptions.splice(colIndex, 1);\r\n        colOptions.splice(rowIndex, 1);\r\n        sqrOptions.splice(sqrIndex, 1);\r\n\r\n        uniqueOptions[index] = (\r\n          checkUniqueOptions(rowOptions, options[index]) //needs to be array of uniqueOptions\r\n            .concat(checkUniqueOptions(colOptions, options[index]))\r\n            .concat(checkUniqueOptions(sqrOptions, options[index])).splice(0, 1)\r\n        );\r\n\r\n      }\r\n      else {\r\n        uniqueOptions[index] = [];\r\n      }\r\n    }\r\n  };\r\n  return uniqueOptions;\r\n}\r\n\r\nfunction checkUniqueOptions(concatGrps, thisOptions) {\r\n  let foundOptions = [];\r\n  let concatAllGrps = concatGrps.reduce((prev, curr) => prev.concat(curr));\r\n\r\n  for (let option of thisOptions) {\r\n    if (!concatAllGrps.includes(option)) {\r\n      foundOptions.push(option);\r\n    }\r\n  }\r\n  return foundOptions;\r\n}\r\n\r\nexport default CalculateUniqueOptions;\r\n","import {get_row, get_col, get_square} from '../common/helper_functions';\r\n// 'checkGrid should be called - outputs a boolean confirmation if the sudoku grid meets completion criteria.\r\n\r\nclass IsSolutionCorrect {\r\n    checkGrid(grid) {\r\n        return this.checkRows(grid) && this.checkColumns(grid) && this.checkSquares(grid);\r\n    }\r\n    \r\n    checkRows(grid) {\r\n        for (let rowIndex = 0; rowIndex < 9; rowIndex++) {\r\n            let row = get_row(grid, rowIndex);\r\n            if (!this.containsOneToNine(row)) { return false }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    checkColumns(grid) {\r\n        for (let columnIndex = 0; columnIndex < 9; columnIndex++) {\r\n            let column = get_col(grid, columnIndex);\r\n            if (!this.containsOneToNine(column)) { return false }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    checkSquares(grid) {\r\n        for (let squareIndex = 0; squareIndex < 9; squareIndex++) {\r\n            let square = get_square(grid, squareIndex)\r\n            if (!this.containsOneToNine(square)) { return false }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    containsOneToNine(numbers) {\r\n        for (let i = 1; i <= 9; i++) {\r\n            if (!numbers.includes(i)) { return false }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default IsSolutionCorrect","import CalculateOptions from './CalculateOptions';\r\nimport CalculateUniqueOptions from './CalculateUniqueOptions';\r\n\r\nexport function iterateSolution1(grid, iterLeft = 1) {\r\n  const optionsGrid = CalculateOptions(grid);\r\n  const updates = {};\r\n  iterLeft -= 1;\r\n  console.log(`Run Sol 1. Iterations left: ${iterLeft}`);\r\n\r\n  // determines elements that only have 1 option possible based on location\r\n  for (let itemIndex in optionsGrid) {\r\n    let options = optionsGrid[itemIndex];\r\n    if (options.length === 1) {\r\n      updates[itemIndex] = options[0];\r\n    };\r\n  }\r\n\r\n  // update grid\r\n  if (Object.keys(updates).length === 0) {\r\n    return {\r\n      grid: grid,\r\n      iterLeft: iterLeft\r\n    } // stops iterations if there are no more updatable values\r\n  }\r\n  grid = updateGrid(grid, updates);\r\n\r\n  if (iterLeft >= 1) {\r\n    return iterateSolution1(grid, iterLeft)\r\n  }\r\n  else {\r\n    return {\r\n      grid: grid,\r\n      iterLeft: iterLeft\r\n    };\r\n  }\r\n}\r\n\r\nexport function iterateSolution2(grid, iterLeft = 1) {\r\n  const optionsGrid = CalculateOptions(grid);\r\n  const uniqueOptionsGrid = CalculateUniqueOptions(optionsGrid);\r\n  const updates = {};\r\n  iterLeft -= 1;\r\n  console.log(`Run Sol 2. Iterations left: ${iterLeft}`);\r\n\r\n  for (let itemIndex in uniqueOptionsGrid) {\r\n    let options = uniqueOptionsGrid[itemIndex];\r\n    if (options.length === 1) {\r\n      updates[itemIndex] = options[0];\r\n    };\r\n  }\r\n\r\n  // update grid\r\n  if (Object.keys(updates).length === 0) {\r\n    return {\r\n      grid: grid,\r\n      iterLeft: iterLeft\r\n    } // stops iterations if there are no more updatable values\r\n  }\r\n\r\n  grid = updateGrid(grid, updates);\r\n\r\n  if (iterLeft >= 1) {\r\n    return iterateSolution2(grid, iterLeft)\r\n  }\r\n  else {\r\n    return {\r\n      grid: grid,\r\n      iterLeft: iterLeft\r\n    };\r\n  }\r\n}\r\n\r\n// update grid\r\nfunction updateGrid(grid, updates) {\r\n  for (let itemIndex in updates) {\r\n    let rowIndex = Math.floor(itemIndex / 9);\r\n    let colIndex = itemIndex - rowIndex * 9;\r\n    console.log(`Changing ${rowIndex}:${colIndex},(${itemIndex})   :  ${updates[itemIndex]}`)\r\n    grid[itemIndex] = updates[itemIndex];\r\n  }\r\n  return grid;\r\n}\r\n\r\nexport default { iterateSolution1, iterateSolution2 };\r\n\r\n// test case https://www.websudoku.com/?level=1&set_id=9052917801\r\n","import { get_row, get_col, get_square } from '../common/helper_functions';\r\n\r\nclass CheckConstraints {\r\n    element(grid, index) {\r\n        return this.checkRow(grid, index) && this.checkColumn(grid, index) && this.checkSquare(grid, index) \r\n    }\r\n\r\n    checkRow(grid, index) {\r\n        let rowIndex = Math.floor(index / 9);\r\n        let row = get_row(grid, rowIndex);\r\n        if (this.hasDuplicates(row)) { return false }\r\n        return true;\r\n    }\r\n\r\n    checkColumn(grid, index) {\r\n        let columnIndex = index % 9;\r\n        let column = get_col(grid, columnIndex);\r\n        if (this.hasDuplicates(column)) { return false }\r\n        return true;\r\n    }\r\n    \r\n    checkSquare(grid, index) {\r\n        let squareIndex = Math.floor(Math.floor(index / 9) / 3) * 3 + Math.floor((index % 9) / 3);\r\n        let square = get_square(grid, squareIndex)\r\n        if (this.hasDuplicates(square)) { return false }\r\n        return true;\r\n    }\r\n    \r\n    hasDuplicates(numbers) {\r\n        var counts = [];\r\n        for(var i = 0; i <= numbers.length; i++) {\r\n            if(counts[numbers[i]] === undefined) {\r\n                counts[numbers[i]] = 1;\r\n            } else if (numbers[i] !== \"\") {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default CheckConstraints","import CalculateOptions from './CalculateOptions';\r\nimport IsSolutionCorrect from './IsSolutionCorrect';\r\nimport CheckConstraints from './CheckConstraints';\r\nimport { clone_deep } from '../common/helper_functions';\r\n\r\nconst isSolCorrect = new IsSolutionCorrect();\r\nconst constraints_met = new CheckConstraints();\r\n\r\nclass BruteSolve {\r\n  constructor() {\r\n    this.iterations = 0;\r\n    this.maxIterations = 100000;\r\n  }\r\n\r\n  solve(grid) {\r\n    this.iterations = 0;\r\n    let iterativelyFilledGrid = this.iterativeFill(grid);\r\n    if (iterativelyFilledGrid) {\r\n      return {\r\n        grid: iterativelyFilledGrid\r\n      };\r\n    } else {\r\n      return {\r\n        grid: grid\r\n      };\r\n    }\r\n  }\r\n\r\n  // DEPRECIATED METHOD. Left here for comparison\r\n  recursivelyFillGrid(grid, [row, col] = [0, 0]) {\r\n\r\n    this.iterations++;\r\n\r\n    if (this.iterations > this.maxIterations) {\r\n      console.table(grid);\r\n      console.log(`iterations: ${this.iterations}`)\r\n      throw new Error('Unsolvable');\r\n    }\r\n\r\n    let options = CalculateOptions(grid);\r\n    let optionsForElement = options[row * 9 + col];\r\n\r\n    if (options.filter((x) => x.length !== 0).length + grid.flat().filter((x) => x.length !== 0).length < 81) return false;\r\n\r\n    if (row === 8 && col === 8) {\r\n      if (grid[row][col] === \"\") grid[row][col] = options[row * 9 + col];\r\n      console.log(`Completed in : ${this.iterations} iterations.`);\r\n      if (isSolCorrect.checkGrid(grid)) return grid;\r\n      else return false\r\n    }\r\n\r\n    //next coordinate if the current one is filled. Branch out of possible options if unfilled.\r\n    if (optionsForElement.length === 0) {\r\n\r\n      if (grid[row][col] === \"\") return false;\r\n      let returnedVal = this.recursivelyFillGrid(grid, this.nextCoordinate(row, col));\r\n      if (returnedVal) return returnedVal;\r\n\r\n    } else {\r\n      for (let option of optionsForElement) {\r\n\r\n        // console.log(`trying ${option} of ${optionsForElement} at : [${[row, col]}]`)\r\n\r\n        let newGrid = clone_deep(grid);\r\n        newGrid[row][col] = option;\r\n\r\n        let returnedVal = this.recursivelyFillGrid(newGrid, this.nextCoordinate(row, col));\r\n        if (returnedVal) return returnedVal;\r\n\r\n        // console.log(`branch ${option} of ${optionsForElement} at : [${[row, col]}] failed`)\r\n\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  iterativeFill(orig_grid) {\r\n    let grid = [...orig_grid]\r\n\r\n    let i = 0\r\n    \r\n    while ( i >= 0 && i < 81) {\r\n      \r\n      this.iterations++;\r\n\r\n      if (this.iterations > this.maxIterations) {\r\n        console.table(grid);\r\n        console.log(`Max iterations hit: ${this.iterations}`)\r\n        return null\r\n        // throw new Error('Unsolvable. Iteration limit hit.');\r\n      }\r\n      \r\n      if (orig_grid[i] !== \"\") {\r\n        i++;\r\n      }\r\n      \r\n      if (grid[i] === \"\") {\r\n        grid[i] = 1;\r\n      }\r\n\r\n      if (grid[i] > 9) {\r\n        grid[i] = \"\";\r\n        i--;\r\n        while (i >= 0 && orig_grid[i] !== \"\") {\r\n          i--;\r\n        }\r\n        if (i<0) { // unsolvable\r\n          // console.log(grid);\r\n          console.log(`Unsolvable. Iterations: ${this.iterations}`)\r\n          return null\r\n        } \r\n        grid[i]++;\r\n      }\r\n\r\n      if (constraints_met.element(grid, i) && grid[i] <= 9) {\r\n        i++;\r\n        while (i < 81 && orig_grid[i] !== \"\") {\r\n          i++;\r\n        }\r\n      } else {\r\n        grid[i]++;\r\n      }\r\n    }\r\n\r\n    console.log(`Iterations for solution: ${this.iterations}`)\r\n    return grid;\r\n  }\r\n\r\n  \r\n  nextCoordinate(row, col) {\r\n    if (col < 8) {\r\n      col++;\r\n    } else {\r\n      row++;\r\n      col = 0;\r\n    }\r\n    return [row, col];\r\n  }\r\n\r\n  prevCoordinate(row, col) {\r\n    if (col > 0) {\r\n      col--;\r\n    } else {\r\n      row--;\r\n      col = 8;\r\n    }\r\n    return [row, col];\r\n  }\r\n\r\n  // update grid //copied from solver.js. Needs consolidation later.\r\n  updateGrid(grid, updates) {\r\n    for (let itemIndex in updates) {\r\n      let rowIndex = Math.floor(itemIndex / 9);\r\n      let colIndex = itemIndex - rowIndex * 9;\r\n      console.log(`Changing ${rowIndex}:${colIndex},(${itemIndex})   :  ${updates[itemIndex]}`)\r\n      grid[rowIndex][colIndex] = updates[itemIndex];\r\n    }\r\n    return grid;\r\n  }\r\n}\r\n\r\nexport default BruteSolve","\r\nexport const grid_templates = {\r\n\r\n    grid_empty : Array(81).fill(\"\"),\r\n\r\n    grid_01 : [\r\n        2, \"\", 9, \"\", 8, \"\", 5, \"\", \"\",\r\n        \"\", \"\", 4, 7, 6, 9, \"\", \"\", \"\",\r\n        3, \"\", \"\", \"\", 1, 2, \"\", 4, \"\",\r\n        \"\", \"\", 3, 6, \"\", \"\", \"\", 5, 4,\r\n        \"\", 4, \"\", \"\", \"\", \"\", \"\", 8, \"\",\r\n        8, 5, \"\", \"\", \"\", 7, 6, \"\", \"\",\r\n        \"\", 2, \"\", 8, 7, \"\", \"\", \"\", 9,\r\n        \"\", \"\", \"\", 1, 9, 6, 2, \"\", \"\",\r\n        \"\", \"\", 5, \"\", 4, \"\", 1, \"\", 8\r\n    ],\r\n\r\n    grid_02 : [\r\n        \"\", \"\", \"\", 6, 7, \"\", \"\", 4, \"\",\r\n        1, \"\", \"\", \"\", \"\", \"\", \"\", 3, 6,\r\n        \"\", 4, 2, 1, \"\", \"\", \"\", \"\", \"\",\r\n        4, \"\", \"\", 7, \"\", \"\", \"\", \"\", \"\",\r\n        \"\", \"\", 5, \"\", \"\", \"\", 3, \"\", \"\",\r\n        \"\", \"\", \"\", \"\", \"\", 2, \"\", \"\", 8,\r\n        \"\", \"\", \"\", \"\", \"\", 1, 6, 7, \"\",\r\n        5, 8, \"\", \"\", \"\", \"\", \"\", \"\", 3,\r\n        \"\", 3, \"\", \"\", 2, 9, \"\", \"\", \"\"\r\n    ],\r\n\r\n    grid_03 : [\r\n        8, \"\", 3, \"\", \"\", \"\", 2, 1, 9,\r\n        9, \"\", 5, \"\", 1, \"\", 7, \"\", \"\",\r\n        \"\", 6, 1, 9, \"\", \"\", 3, \"\", \"\",\r\n        2, 3, 4, 5, 6, 1, 9, \"\", \"\",\r\n        1, 8, 9, 4, 3, 7, 5, 2, 6,\r\n        \"\", \"\", \"\", \"\", \"\", 9, 1, 4, 3,\r\n        \"\", \"\", \"\", \"\", \"\", 4, 8, 9, \"\",\r\n        \"\", \"\", 8, \"\", 9, \"\", 6, \"\", 5,\r\n        \"\", 9, 2, \"\", \"\", \"\", 4, \"\", 1\r\n    ]\r\n\r\n};","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport MainWindow from './components/MainWindow';\r\nimport RightBox from './components/RightBox';\r\nimport CalculateOptions from './components/CalculateOptions';\r\nimport CalculateUniqueOptions from './components/CalculateUniqueOptions';\r\nimport IsSolutionCorrect from './components/IsSolutionCorrect';\r\nimport { iterateSolution1, iterateSolution2 } from './components/Solver';\r\nimport BruteSolver from './components/BruteSolver';\r\nimport { grid_templates } from './common/grid_templates';\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.newGrid = this.newGrid.bind(this);\r\n    this.updateGrid = this.updateGrid.bind(this);\r\n    this.calcOptions = this.calcOptions.bind(this);\r\n    this.calcUniqueOptions = this.calcUniqueOptions.bind(this);\r\n    this.solveSol1 = this.solveSol1.bind(this);\r\n    this.solveSol2 = this.solveSol2.bind(this);\r\n    this.attemptFullSolve = this.attemptFullSolve.bind(this);\r\n    this.checkSolution = this.checkSolution.bind(this);\r\n    this.bruteSolve = this.bruteSolve.bind(this);\r\n\r\n    this.bruteSolver = new BruteSolver();\r\n    this.isSolutionCorrect = new IsSolutionCorrect();\r\n    //get initial state\r\n    this.state = {\r\n      grid: grid_templates.grid_empty,\r\n      gridOptions: [],\r\n      uniqueOptions: [],\r\n      solved: null\r\n    };\r\n  }\r\n\r\n  // clones 81 len array from grid_templates file\r\n  newGrid(grid_id = 'grid_empty') {\r\n    \r\n    const grid = [...grid_templates[grid_id]];\r\n\r\n    let solved;\r\n\r\n    this.setState({ grid });\r\n    this.setState({ solved });\r\n  }\r\n\r\n  updateGrid(vert, horiz, value) {\r\n    const grid = [...this.state.grid];\r\n    if (value === \"\") grid[vert*9 + horiz] = value;\r\n    else grid[vert*9 + horiz] = 1 * value;\r\n\r\n    let solved;\r\n\r\n    this.setState({ grid });\r\n    this.setState({ solved });\r\n  }\r\n\r\n  calcOptions() {\r\n    const gridOptions = CalculateOptions(this.state.grid);\r\n    this.setState({ gridOptions });\r\n    console.table(gridOptions);\r\n  }\r\n\r\n  calcUniqueOptions() {\r\n    const gridOptions = CalculateOptions(this.state.grid);\r\n    const uniqueOptions = CalculateUniqueOptions(gridOptions);\r\n    this.setState({ uniqueOptions });\r\n    console.table(uniqueOptions);\r\n  }\r\n\r\n  solveSol1(iterations) {\r\n    const { grid } = iterateSolution1(this.state.grid, iterations);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  solveSol2(iterations) {\r\n    const { grid } = iterateSolution2(this.state.grid, iterations);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  attemptFullSolve(iterations) {\r\n    for (let i = 0; i < iterations; i++) {\r\n      this.solveSol1(10);\r\n      this.solveSol2(10);\r\n    };\r\n  }\r\n\r\n  bruteSolve() {\r\n    const { grid } = this.bruteSolver.solve(this.state.grid);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  checkSolution() {\r\n    let solved = false;\r\n    if (this.isSolutionCorrect.checkGrid(this.state.grid)) {\r\n      console.log(\"The solution is correct!\")\r\n      solved = true;\r\n    } else {\r\n      console.log(\"This is not the correct solution!\")\r\n    }\r\n    this.setState({ solved });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <div className=\"body\">\r\n          <MainWindow\r\n            grid={this.state.grid}\r\n            solved={this.state.solved}\r\n            updateGrid={this.updateGrid}\r\n            newGrid={this.newGrid}\r\n            checkSolution={this.checkSolution}\r\n          />\r\n          <RightBox\r\n            calcOptions={this.calcOptions}\r\n            calcUniqueOptions={this.calcUniqueOptions}\r\n            solveSol1={this.solveSol1}\r\n            solveSol2={this.solveSol2}\r\n            attemptFullSolve={this.attemptFullSolve}\r\n            bruteSolve={this.bruteSolve}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}