{"version":3,"sources":["components/Header.js","components/SudokuGrid.js","components/MainWindow.js","components/RightBox.js","components/CalculateOptions.js","components/CalculateUniqueOptions.js","components/IsSolutionCorrect.js","components/Solver.js","components/CheckConstraints.js","components/BruteSolver.js","App.js","registerServiceWorker.js","index.js"],"names":["Header","className","Component","SudokuGrid","handleChange","bind","e","row","col","preventDefault","console","log","target","value","vert","horiz","test","this","props","updateGrid","newGrid","select","grid","Array","keys","map","maxLength","onClick","clickHandler","key","onChange","style","color","solved","MainWindow","checkSolutionMessage","emptyGrid","newGrid2","newGrid3","checkSolution","RightBox","calcOptions","calcUniqueOptions","solveSol1","solveSol2","attemptFullSolve","bruteSolve","column","colIndex","rowIndex","push","square","sqrWidth","fill","val","sqrIndex","rowId","Math","floor","colId","checkOptions","concatGrps","foundOptions","option","includes","CalculateOptions","options","sqr","concat","Number","checkUniqueOptions","thisOptions","concatAllGrps","reduce","prev","curr","CalculateUniqueOptions","uniqueOptions","rowOptions","colOptions","sqrOptions","splice","IsSolutionCorrect","checkRows","checkColumns","checkSquares","containsOneToNine","columnIndex","squareIndex","filter","x","slice","flat","numbers","i","iterateSolution1","iterLeft","optionsGrid","updates","itemIndex","length","Object","iterateSolution2","optionsOptionsGrid","rowify","output","CheckConstraints","hasDuplicates","counts","undefined","isSolCorrect","constraints_met","BruteSolve","iterations","maxIterations","iterativelyFilledGrid","iterativeFill","table","Error","optionsForElement","checkGrid","returnedVal","recursivelyFillGrid","nextCoordinate","cloneDeep","orig_grid","j","prevCoordinate","gridClone","App","bruteSolver","BruteSolver","isSolutionCorrect","state","gridOptions","setState","solve","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2110b8fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <h1 className=\"title\">Sudoku!</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass SudokuGrid extends Component {\r\n  constructor() {\r\n    super();\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  //updates grid when user inputs value\r\n  handleChange(e, row, col) {\r\n    e.preventDefault();\r\n    console.log(e.target.value);\r\n    const vert = row;\r\n    const horiz = col;\r\n\r\n    let validChar = /^$|[1-9]/\r\n    if (validChar.test(e.target.value)) {\r\n      this.props.updateGrid(vert, horiz, e.target.value);\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.newGrid();\r\n  }\r\n\r\n  clickHandler(e) {\r\n    e.target.select();\r\n  }\r\n\r\n  col(row, grid) {\r\n    return [...Array(9).keys()].map((col) => (\r\n      <textarea className=\"box\" maxLength=\"1\" onClick={this.clickHandler} key={`col-${col + 1}`} value={grid[row][col]} onChange={(e) => this.handleChange(e, row, col)} style={{ color: this.props.solved ? \"Green\" : \"\" }}></textarea>\r\n    ))\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.props;\r\n\r\n    return (\r\n      <div className=\"sudokuBoxContainer\">\r\n        <div className=\"sudokuBox\">\r\n          {[...Array(9).keys()].map((row) => (\r\n            <div className=\"row\" key={`row-${row + 1}`}>\r\n              {this.col(row, grid)}\r\n            </div>\r\n          ))\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SudokuGrid;","import React, { Component } from 'react';\r\nimport SudokuGrid from './SudokuGrid';\r\n\r\nclass MainWindow extends Component {\r\n  render() {\r\n    let checkSolutionMessage;\r\n    if (this.props.solved) {\r\n      checkSolutionMessage = <p>Solution is Correct!</p>;\r\n    } else if (this.props.solved === false) {\r\n      checkSolutionMessage = <p>That's not a valid solution! :(</p>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"window\">\r\n        <SudokuGrid\r\n          grid={this.props.grid}\r\n          solved={this.props.solved}\r\n          newGrid={this.props.newGrid}\r\n          updateGrid={this.props.updateGrid}\r\n        />\r\n        <div className=\"grid-choices\">\r\n          <p>Scenarios:\r\n        <button onClick={() => this.props.emptyGrid()}>Empty Grid</button>\r\n            <button onClick={() => this.props.newGrid()}>New Grid 1</button>\r\n            <button onClick={() => this.props.newGrid2()}>New Grid 2</button>\r\n            <button onClick={() => this.props.newGrid3()}>New Grid 3</button>\r\n          </p>\r\n        </div>\r\n        <div className=\"check-sol-button\">\r\n          <button onClick={() => this.props.checkSolution()}>Check Solution</button>\r\n          {checkSolutionMessage}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default MainWindow;\r\n","import React, { Component } from 'react';\r\n\r\nclass RightBox extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"rightBox\">\r\n        <p>Console Commands:\r\n          <button onClick={() => this.props.calcOptions()}>Calculate Options</button>\r\n          <button onClick={() => this.props.calcUniqueOptions()}>Calculate Unique Options</button>\r\n        </p>\r\n        <div>Depreciated Solution Methods\r\n          <div className=\"sol-1-buttons\">\r\n            <p>Method 1:\r\n              <button onClick={() => this.props.solveSol1()}>x1</button>\r\n              <button onClick={() => this.props.solveSol1(5)}>x5</button>\r\n              <button onClick={() => this.props.solveSol1(10)}>x10</button>\r\n            </p>\r\n          </div>\r\n          <div className=\"sol-2-buttons\">\r\n            <p>Method 2:\r\n              <button onClick={() => this.props.solveSol2()}>x1</button>\r\n              <button onClick={() => this.props.solveSol2(5)}>x5</button>\r\n              <button onClick={() => this.props.solveSol2(10)}>x10</button>\r\n            </p>\r\n          </div>\r\n          <div className=\"full-sol-button\">\r\n            <button onClick={() => this.props.attemptFullSolve(10)}>Attempt Full Solve (M1+2)</button>\r\n          </div>\r\n          <p>..............................\r\n          </p>\r\n        </div>\r\n        <div>Iterative Solver:\r\n          <div className=\"brute-sol-button\">\r\n            <p>TRY:</p>\r\n            <button onClick={() => this.props.bruteSolve()}>Brute Solve</button>\r\n          </div>\r\n        </div>\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\nexport default RightBox;\r\n","export function CalculateOptions(grid) {\r\n  const options = [];\r\n\r\n  for (let rowIndex in grid) {\r\n    let row = grid[rowIndex]; // whole row\r\n\r\n    for (let colIndex in grid[rowIndex]) {\r\n      if (grid[rowIndex][colIndex] === \"\") {\r\n        let col = column(colIndex, grid); // whole column\r\n        let sqr = square(rowIndex, colIndex, grid); // whole square\r\n\r\n        let concatGrps = [].concat(row).concat(col).concat(sqr);\r\n\r\n        options[Number(rowIndex) * 9 + Number(colIndex)] = checkOptions(concatGrps); //needs to be array of options\r\n\r\n      }\r\n      else {\r\n        options[Number(rowIndex) * 9 + Number(colIndex)] = [];\r\n      }\r\n    }\r\n  };\r\n\r\n  return options;\r\n}\r\n\r\n// returns array containing column values from grid at [colIndex]\r\nfunction column(colIndex, grid) {\r\n  let col = [];\r\n  for (let rowIndex in grid) {\r\n    col.push(grid[rowIndex][colIndex]);\r\n  }\r\n  return col;\r\n}\r\n\r\n// returns array containing values in the square of the value at [rowIndex][colIndex]\r\nfunction square(rowIndex, colIndex, grid) {\r\n  let sqrWidth = 3;\r\n  let sqr = new Array(sqrWidth * sqrWidth).fill(\"\");\r\n\r\n  let newSqr = sqr.map((val, sqrIndex) => {\r\n    let rowId = Math.floor(sqrIndex / sqrWidth) + sqrWidth * Math.floor(rowIndex / sqrWidth);\r\n    let colId = sqrIndex - sqrWidth * Math.floor(sqrIndex / sqrWidth) + sqrWidth * Math.floor(colIndex / sqrWidth);\r\n    return grid[rowId][colId];\r\n  });\r\n\r\n  return newSqr;\r\n}\r\n\r\n// assumes possible values are 1 - 9\r\nfunction checkOptions(concatGrps) {\r\n  let possibleOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n  let foundOptions = [];\r\n\r\n  for (let option of possibleOptions) {\r\n    if (!concatGrps.includes(option)) {\r\n      foundOptions.push(option);\r\n    }\r\n  }\r\n  return foundOptions;\r\n}\r\n\r\nexport default CalculateOptions;\r\n","export function CalculateUniqueOptions(options) {\r\n  const uniqueOptions = [];\r\n\r\n  for (let rowIndex in options) {\r\n    let row = options[rowIndex]; // whole row\r\n\r\n    for (let colIndex in options[rowIndex]) {\r\n      //console.log(colIndex);\r\n      if (options[rowIndex][colIndex] !== []) {\r\n        let rowOptions = [...row]; // copy of whole row\r\n        let colOptions = column(colIndex, options); // whole column\r\n        let sqrOptions = square(rowIndex, colIndex, options); // whole square\r\n\r\n        //console.log(`${rowIndex},${colIndex} :  ${sqrOptions}`);\r\n        rowOptions.splice(colIndex, 1);\r\n        colOptions.splice(rowIndex, 1);\r\n        sqrOptions.splice((colIndex - 3 * Math.floor(colIndex / 3) + 3 * rowIndex - 9 * Math.floor(rowIndex / 3)), 1);\r\n        //console.log(`${rowIndex},${colIndex} :  ${sqrOptions}`);\r\n\r\n        uniqueOptions[Number(rowIndex) * 9 + Number(colIndex)] = (\r\n          checkUniqueOptions(rowOptions, options[rowIndex][colIndex]) //needs to be array of uniqueOptions\r\n            .concat(checkUniqueOptions(colOptions, options[rowIndex][colIndex]))\r\n            .concat(checkUniqueOptions(sqrOptions, options[rowIndex][colIndex])).splice(0, 1)\r\n        );\r\n\r\n      }\r\n      else {\r\n        uniqueOptions[Number(rowIndex) * 9 + Number(colIndex)] = [];\r\n      }\r\n    }\r\n  };\r\n  //console.table(uniqueOptions);\r\n  return uniqueOptions;\r\n}\r\n\r\n// returns array containing column values from grid at [colIndex]\r\nfunction column(colIndex, options) {\r\n  let col = [];\r\n  for (let rowIndex in options) {\r\n    col.push(options[rowIndex][colIndex]);\r\n  }\r\n  return col;\r\n}\r\n\r\n// returns array containing values in the square of the value at [rowIndex][colIndex]\r\nfunction square(rowIndex, colIndex, options) {\r\n  let sqrWidth = 3;\r\n  let sqr = new Array(sqrWidth * sqrWidth).fill(0);\r\n\r\n  let newSqr = sqr.map((val, sqrIndex) => {\r\n    let rowId = Math.floor(sqrIndex / sqrWidth) + sqrWidth * Math.floor(rowIndex / sqrWidth);\r\n    let colId = sqrIndex - sqrWidth * Math.floor(sqrIndex / sqrWidth) + sqrWidth * Math.floor(colIndex / sqrWidth);\r\n    return options[rowId][colId] || 0;\r\n  });\r\n  return newSqr;\r\n}\r\n\r\n// assumes possible values are 1 - 9\r\nfunction checkUniqueOptions(concatGrps, thisOptions) {\r\n  let foundOptions = [];\r\n  let concatAllGrps = concatGrps.reduce((prev, curr) => prev.concat(curr));\r\n\r\n  for (let option of thisOptions) {\r\n    if (!concatAllGrps.includes(option)) {\r\n      foundOptions.push(option);\r\n    }\r\n  }\r\n  return foundOptions;\r\n}\r\n\r\nexport default CalculateUniqueOptions;\r\n","// 'checkGrid should be called - outputs a boolean confirmation if the sudoku grid meets completion criteria.\r\n\r\nclass IsSolutionCorrect {\r\n    checkGrid(grid) {\r\n        return this.checkRows(grid) && this.checkColumns(grid) && this.checkSquares(grid);\r\n    }\r\n    \r\n    checkRows(grid) {\r\n        for (let rowIndex = 0; rowIndex < 9; rowIndex++) {\r\n            let row = grid[rowIndex];\r\n            if (!this.containsOneToNine(row)) { return false }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    checkColumns(grid) {\r\n        for (let columnIndex = 0; columnIndex < 9; columnIndex++) {\r\n            let column = grid.map(row => row[columnIndex]);\r\n            if (!this.containsOneToNine(column)) { return false }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    checkSquares(grid) {\r\n        for (let squareIndex = 0; squareIndex < 9; squareIndex++) {\r\n            let square = grid.filter((val, rowIndex) => Math.floor(rowIndex / 3) === Math.floor(squareIndex / 3))\r\n                             .map(x => x.slice((squareIndex % 3) * 3, (squareIndex % 3) * 3 + 3))\r\n                             .flat();\r\n            if (!this.containsOneToNine(square)) { return false }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    containsOneToNine(numbers) {\r\n        for (let i = 1; i <= 9; i++) {\r\n            if (!numbers.includes(i)) { return false }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default IsSolutionCorrect","import CalculateOptions from './CalculateOptions';\r\nimport CalculateUniqueOptions from './CalculateUniqueOptions';\r\n\r\nexport function iterateSolution1(grid, iterLeft = 1) {\r\n  const optionsGrid = CalculateOptions(grid);\r\n  const updates = {};\r\n  iterLeft -= 1;\r\n  console.log(`Run Sol 1. Iterations left: ${iterLeft}`);\r\n\r\n  // determines boxes that only have 1 option possible based on location\r\n  for (let itemIndex in optionsGrid) {\r\n    let options = optionsGrid[itemIndex];\r\n    if (options.length === 1) {\r\n      updates[itemIndex] = options[0];\r\n    };\r\n  }\r\n\r\n  // update grid\r\n  if (Object.keys(updates).length === 0) {\r\n    return {\r\n      grid: grid,\r\n      iterLeft: iterLeft\r\n    } // stops iterations if there are no more updatable values\r\n  }\r\n  grid = updateGrid(grid, updates);\r\n\r\n  // iterate till iterLeft 0\r\n  if (iterLeft >= 1) {\r\n    return iterateSolution1(grid, iterLeft)\r\n  }\r\n  else {\r\n    return {\r\n      grid: grid,\r\n      iterLeft: iterLeft\r\n    };\r\n  }\r\n}\r\n\r\nexport function iterateSolution2(grid, iterLeft = 1) {\r\n  const optionsGrid = CalculateOptions(grid);\r\n  const optionsOptionsGrid = CalculateUniqueOptions(rowify(optionsGrid));\r\n  const updates = {};\r\n  iterLeft -= 1;\r\n  console.log(`Run Sol 2. Iterations left: ${iterLeft}`);\r\n\r\n  // determines boxes that only have 1 option possible based on location\r\n  for (let itemIndex in optionsOptionsGrid) {\r\n    let options = optionsOptionsGrid[itemIndex];\r\n    if (options.length === 1) {\r\n      updates[itemIndex] = options[0];\r\n    };\r\n  }\r\n\r\n  // update grid\r\n  if (Object.keys(updates).length === 0) {\r\n    return {\r\n      grid: grid,\r\n      iterLeft: iterLeft\r\n    } // stops iterations if there are no more updatable values\r\n  }\r\n\r\n  grid = updateGrid(grid, updates);\r\n\r\n  // iterate\r\n  if (iterLeft >= 1) {\r\n    return iterateSolution2(grid, iterLeft)\r\n  }\r\n  else {\r\n    return {\r\n      grid: grid,\r\n      iterLeft: iterLeft\r\n    };\r\n  }\r\n}\r\n\r\n// update grid\r\nfunction updateGrid(grid, updates) {\r\n  for (let itemIndex in updates) {\r\n    let rowIndex = Math.floor(itemIndex / 9);\r\n    let colIndex = itemIndex - rowIndex * 9;\r\n    console.log(`Changing ${rowIndex}:${colIndex},(${itemIndex})   :  ${updates[itemIndex]}`)\r\n    grid[rowIndex][colIndex] = updates[itemIndex];\r\n  }\r\n  return grid;\r\n}\r\n\r\n// needed because of the structural diff. between grid and optionsGrid - needs to be commonised later.\r\n// will probably need a 'row' function in CalculateOptions as exists for col and sqr.\r\nexport function rowify(optionsGrid) {\r\n  let output = new Array(9).fill(\"\").map(() => new Array(9).fill(\"\").map(() => \"\"));\r\n  for (let rowIndex in output) {\r\n    for (let colIndex in output) {\r\n      output[rowIndex][colIndex] = optionsGrid[Number(colIndex) + Number(rowIndex) * 9];\r\n    }\r\n  }\r\n  //console.log(output)\r\n  return output;\r\n}\r\n\r\nexport default { iterateSolution1, iterateSolution2, rowify };\r\n\r\n// test case https://www.websudoku.com/?level=1&set_id=9052917801\r\n","class CheckConstraints {\r\n    grid(grid) {\r\n        return this.checkRows(grid) && this.checkColumns(grid) && this.checkSquares(grid);\r\n    }\r\n    \r\n    checkRows(grid) {\r\n        for (let rowIndex = 0; rowIndex < 9; rowIndex++) {\r\n            let row = grid[rowIndex];\r\n            if (this.hasDuplicates(row)) { return false }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    checkColumns(grid) {\r\n        for (let columnIndex = 0; columnIndex < 9; columnIndex++) {\r\n            let column = grid.map(row => row[columnIndex]);\r\n            if (this.hasDuplicates(column)) { return false }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    checkSquares(grid) {\r\n        for (let squareIndex = 0; squareIndex < 9; squareIndex++) {\r\n            let square = grid.filter((val, rowIndex) => Math.floor(rowIndex / 3) === Math.floor(squareIndex / 3))\r\n                             .map(x => x.slice((squareIndex % 3) * 3, (squareIndex % 3) * 3 + 3))\r\n                             .flat();\r\n            if (this.hasDuplicates(square)) { return false }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    hasDuplicates(numbers) {\r\n        var counts = [];\r\n        for(var i = 0; i <= numbers.length; i++) {\r\n            if(counts[numbers[i]] === undefined) {\r\n                counts[numbers[i]] = 1;\r\n            } else if (numbers[i] !== \"\") {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default CheckConstraints","import CalculateOptions from './CalculateOptions';\r\nimport IsSolutionCorrect from './IsSolutionCorrect';\r\nimport CheckConstraints from './CheckConstraints';\r\n\r\nconst isSolCorrect = new IsSolutionCorrect();\r\nconst constraints_met = new CheckConstraints();\r\n\r\nclass BruteSolve {\r\n  constructor() {\r\n    this.iterations = 0;\r\n    this.maxIterations = 100000;\r\n  }\r\n\r\n  solve(grid) {\r\n    this.iterations = 0;\r\n    let iterativelyFilledGrid = this.iterativeFill(grid);\r\n    if (iterativelyFilledGrid) {\r\n      return {\r\n        grid: iterativelyFilledGrid\r\n      };\r\n    } else {\r\n      return {\r\n        grid: grid\r\n      };\r\n    }\r\n  }\r\n\r\n  // DEPRECIATED METHOD. Left here for comparison\r\n  recursivelyFillGrid(grid, [row, col] = [0, 0]) {\r\n\r\n    this.iterations++;\r\n\r\n    if (this.iterations > this.maxIterations) {\r\n      console.table(grid);\r\n      console.log(`iterations: ${this.iterations}`)\r\n      throw new Error('Unsolvable');\r\n    }\r\n\r\n    let options = CalculateOptions(grid);\r\n    let optionsForElement = options[row * 9 + col];\r\n\r\n    if (options.filter((x) => x.length !== 0).length + grid.flat().filter((x) => x.length !== 0).length < 81) return false;\r\n\r\n    if (row === 8 && col === 8) {\r\n      if (grid[row][col] === \"\") grid[row][col] = options[row * 9 + col];\r\n      console.log(`Completed in : ${this.iterations} iterations.`);\r\n      if (isSolCorrect.checkGrid(grid)) return grid;\r\n      else return false\r\n    }\r\n\r\n    //next coordinate if the current one is filled. Branch out of possible options if unfilled.\r\n    if (optionsForElement.length === 0) {\r\n\r\n      if (grid[row][col] === \"\") return false;\r\n      let returnedVal = this.recursivelyFillGrid(grid, this.nextCoordinate(row, col));\r\n      if (returnedVal) return returnedVal;\r\n\r\n    } else {\r\n      for (let option of optionsForElement) {\r\n\r\n        // console.log(`trying ${option} of ${optionsForElement} at : [${[row, col]}]`)\r\n\r\n        let newGrid = this.cloneDeep(grid);\r\n        newGrid[row][col] = option;\r\n\r\n        let returnedVal = this.recursivelyFillGrid(newGrid, this.nextCoordinate(row, col));\r\n        if (returnedVal) return returnedVal;\r\n\r\n        // console.log(`branch ${option} of ${optionsForElement} at : [${[row, col]}] failed`)\r\n\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  iterativeFill(orig_grid) {\r\n    let grid = this.cloneDeep(orig_grid)\r\n\r\n    let i = 0\r\n    let j = 0\r\n    \r\n    while ( i >= 0 && i < 9) {\r\n      \r\n      this.iterations++;\r\n\r\n      if (this.iterations > this.maxIterations) {\r\n        console.table(grid);\r\n        console.log(`Max iterations hit: ${this.iterations}`)\r\n        return null\r\n        // throw new Error('Unsolvable. Iteration limit hit.');\r\n      }\r\n      \r\n      if (orig_grid[i][j] !== \"\") {\r\n        [i, j] = this.nextCoordinate(i, j);\r\n      }\r\n      \r\n      if (grid[i][j] === \"\") {\r\n        grid[i][j] = 1;\r\n      }\r\n\r\n      if (grid[i][j] > 9) {\r\n        grid[i][j] = \"\";\r\n        [i, j] = this.prevCoordinate(i, j)\r\n        while (i >= 0 && orig_grid[i][j] !== \"\") {\r\n          [i, j] = this.prevCoordinate(i, j);\r\n        }\r\n        if (i<0) { // unsolvable\r\n          console.table(grid);\r\n          console.log(`Unsolvable. Iterations: ${this.iterations}`)\r\n          return null\r\n        } \r\n        grid[i][j]++;\r\n      }\r\n\r\n\r\n      if (constraints_met.grid(grid) && grid[i][j] <= 9) {\r\n        [i, j] = this.nextCoordinate(i, j);\r\n        while (i < 9 && orig_grid[i][j] !== \"\") {\r\n          [i, j] = this.nextCoordinate(i, j);\r\n        }\r\n      } else {\r\n        grid[i][j]++;\r\n      }\r\n    }\r\n\r\n    console.log(`Iterations for solution: ${this.iterations}`)\r\n    return grid;\r\n  }\r\n\r\n  \r\n  nextCoordinate(row, col) {\r\n    if (col < 8) {\r\n      col++;\r\n    } else {\r\n      row++;\r\n      col = 0;\r\n    }\r\n    return [row, col];\r\n  }\r\n\r\n  prevCoordinate(row, col) {\r\n    if (col > 0) {\r\n      col--;\r\n    } else {\r\n      row--;\r\n      col = 8;\r\n    }\r\n    return [row, col];\r\n  }\r\n\r\n  cloneDeep(grid) {\r\n    let gridClone = [];\r\n    for (let row of grid) {\r\n      gridClone.push([...row]);\r\n    }\r\n    return gridClone;\r\n  }\r\n\r\n  // update grid //copied from solver.js. Needs consolidation later.\r\n  updateGrid(grid, updates) {\r\n    for (let itemIndex in updates) {\r\n      let rowIndex = Math.floor(itemIndex / 9);\r\n      let colIndex = itemIndex - rowIndex * 9;\r\n      console.log(`Changing ${rowIndex}:${colIndex},(${itemIndex})   :  ${updates[itemIndex]}`)\r\n      grid[rowIndex][colIndex] = updates[itemIndex];\r\n    }\r\n    return grid;\r\n  }\r\n}\r\n\r\nexport default BruteSolve","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport MainWindow from './components/MainWindow';\r\nimport RightBox from './components/RightBox';\r\nimport CalculateOptions from './components/CalculateOptions';\r\nimport CalculateUniqueOptions from './components/CalculateUniqueOptions';\r\nimport IsSolutionCorrect from './components/IsSolutionCorrect';\r\nimport { iterateSolution1, iterateSolution2, rowify } from './components/Solver';\r\nimport BruteSolver from './components/BruteSolver';\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.emptyGrid = this.emptyGrid.bind(this);\r\n    this.newGrid = this.newGrid.bind(this);\r\n    this.newGrid2 = this.newGrid2.bind(this);\r\n    this.newGrid3 = this.newGrid3.bind(this);\r\n    this.updateGrid = this.updateGrid.bind(this);\r\n    this.calcOptions = this.calcOptions.bind(this);\r\n    this.calcUniqueOptions = this.calcUniqueOptions.bind(this);\r\n    this.solveSol1 = this.solveSol1.bind(this);\r\n    this.solveSol2 = this.solveSol2.bind(this);\r\n    this.attemptFullSolve = this.attemptFullSolve.bind(this);\r\n    this.checkSolution = this.checkSolution.bind(this);\r\n    this.bruteSolve = this.bruteSolve.bind(this);\r\n\r\n    this.bruteSolver = new BruteSolver();\r\n    this.isSolutionCorrect = new IsSolutionCorrect();\r\n    //get initial state\r\n    this.state = {\r\n      grid: new Array(9).fill(\"\").map(() => new Array(9).fill(\"\").map(() => \"\")),\r\n      gridOptions: [],\r\n      uniqueOptions: [],\r\n      solved: null\r\n    };\r\n  }\r\n\r\n  emptyGrid() {\r\n    //\r\n    const grid = [\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\r\n    ]\r\n\r\n    let solved;\r\n\r\n    this.setState({ grid });\r\n    this.setState({ solved });\r\n  }\r\n\r\n  // creates a 9x9 grid and populates it with data from ??\r\n  newGrid() {\r\n    //\r\n    const grid = [\r\n      [2, \"\", 9, \"\", 8, \"\", 5, \"\", \"\"],\r\n      [\"\", \"\", 4, 7, 6, 9, \"\", \"\", \"\"],\r\n      [3, \"\", \"\", \"\", 1, 2, \"\", 4, \"\"],\r\n      [\"\", \"\", 3, 6, \"\", \"\", \"\", 5, 4],\r\n      [\"\", 4, \"\", \"\", \"\", \"\", \"\", 8, \"\"],\r\n      [8, 5, \"\", \"\", \"\", 7, 6, \"\", \"\"],\r\n      [\"\", 2, \"\", 8, 7, \"\", \"\", \"\", 9],\r\n      [\"\", \"\", \"\", 1, 9, 6, 2, \"\", \"\"],\r\n      [\"\", \"\", 5, \"\", 4, \"\", 1, \"\", 8]\r\n    ]\r\n\r\n    let solved;\r\n\r\n    this.setState({ grid });\r\n    this.setState({ solved });\r\n  }\r\n\r\n  newGrid2() {\r\n    //\r\n    const grid = [\r\n      [\"\", \"\", \"\", 6, 7, \"\", \"\", 4, \"\"],\r\n      [1, \"\", \"\", \"\", \"\", \"\", \"\", 3, 6],\r\n      [\"\", 4, 2, 1, \"\", \"\", \"\", \"\", \"\"],\r\n      [4, \"\", \"\", 7, \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", 5, \"\", \"\", \"\", 3, \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", 2, \"\", \"\", 8],\r\n      [\"\", \"\", \"\", \"\", \"\", 1, 6, 7, \"\"],\r\n      [5, 8, \"\", \"\", \"\", \"\", \"\", \"\", 3],\r\n      [\"\", 3, \"\", \"\", 2, 9, \"\", \"\", \"\"]\r\n    ]\r\n\r\n    let solved;\r\n\r\n    this.setState({ grid });\r\n    this.setState({ solved });\r\n  }\r\n\r\n  newGrid3() {\r\n    //\r\n    const grid = [\r\n      [8, \"\", 3, \"\", \"\", \"\", 2, 1, 9],\r\n      [9, \"\", 5, \"\", 1, \"\", 7, \"\", \"\"],\r\n      [\"\", 6, 1, 9, \"\", \"\", 3, \"\", \"\"],\r\n      [2, 3, 4, 5, 6, 1, 9, \"\", \"\"],\r\n      [1, 8, 9, 4, 3, 7, 5, 2, 6],\r\n      [\"\", \"\", \"\", \"\", \"\", 9, 1, 4, 3],\r\n      [\"\", \"\", \"\", \"\", \"\", 4, 8, 9, \"\"],\r\n      [\"\", \"\", 8, \"\", 9, \"\", 6, \"\", 5],\r\n      [\"\", 9, 2, \"\", \"\", \"\", 4, \"\", 1]\r\n    ]\r\n\r\n    let solved;\r\n\r\n    this.setState({ grid });\r\n    this.setState({ solved });\r\n  }\r\n\r\n  updateGrid(vert, horiz, value) {\r\n    const grid = [...this.state.grid];\r\n    if (value === \"\") grid[vert][horiz] = value;\r\n    else grid[vert][horiz] = 1 * value;\r\n\r\n    let solved;\r\n\r\n    this.setState({ grid });\r\n    this.setState({ solved });\r\n  }\r\n\r\n  calcOptions() {\r\n    const gridOptions = CalculateOptions(this.state.grid);\r\n    this.setState({ gridOptions });\r\n    console.table(gridOptions);\r\n  }\r\n\r\n  calcUniqueOptions() {\r\n    const gridOptions = CalculateOptions(this.state.grid);\r\n    const uniqueOptions = CalculateUniqueOptions(rowify(gridOptions));\r\n    this.setState({ uniqueOptions });\r\n    console.table(uniqueOptions);\r\n  }\r\n\r\n  solveSol1(iterations) {\r\n    const { grid } = iterateSolution1(this.state.grid, iterations);\r\n    //console.log(iterLeft);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  solveSol2(iterations) {\r\n    const { grid } = iterateSolution2(this.state.grid, iterations);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  attemptFullSolve(iterations) {\r\n    for (let i = 0; i < iterations; i++) {\r\n      this.solveSol1(10);\r\n      this.solveSol2(10);\r\n      //check if grid is solved and break;\r\n    };\r\n  }\r\n\r\n  bruteSolve() {\r\n    const { grid } = this.bruteSolver.solve(this.state.grid);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  checkSolution() {\r\n    let solved = false;\r\n    if (this.isSolutionCorrect.checkGrid(this.state.grid)) {\r\n      console.log(\"The solution is correct!\")\r\n      solved = true;\r\n    } else {\r\n      console.log(\"This is not the correct solution!\")\r\n    }\r\n    this.setState({ solved });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <div className=\"body\">\r\n          <MainWindow\r\n            grid={this.state.grid}\r\n            solved={this.state.solved}\r\n            updateGrid={this.updateGrid}\r\n            emptyGrid={this.emptyGrid}\r\n            newGrid={this.newGrid}\r\n            newGrid2={this.newGrid2}\r\n            newGrid3={this.newGrid3}\r\n            checkSolution={this.checkSolution}\r\n          />\r\n          <RightBox\r\n            calcOptions={this.calcOptions}\r\n            calcUniqueOptions={this.calcUniqueOptions}\r\n            solveSol1={this.solveSol1}\r\n            solveSol2={this.solveSol2}\r\n            attemptFullSolve={this.attemptFullSolve}\r\n            bruteSolve={this.bruteSolve}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}