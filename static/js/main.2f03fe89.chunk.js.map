{"version":3,"sources":["components/Header.js","components/SudokuGrid.js","components/MainWindow.js","components/RightBox.js","components/CalculateOptions.js","components/CalculateUniqueOptions.js","components/IsSolutionCorrect.js","components/Solver.js","components/BruteSolver.js","App.js","registerServiceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","SudokuGrid","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","e","row","col","preventDefault","console","log","target","value","vert","horiz","test","props","updateGrid","newGrid","select","grid","_this2","toConsumableArray","Array","keys","map","maxLength","onClick","clickHandler","key","concat","onChange","style","color","solved","_this3","MainWindow","checkSolutionMessage","components_SudokuGrid","emptyGrid","newGrid2","newGrid3","checkSolution","RightBox","calcOptions","calcUniqueOptions","solveSol1","solveSol2","attemptFullSolve","bruteSolve","column","colIndex","rowIndex","push","square","sqrWidth","fill","val","sqrIndex","rowId","Math","floor","colId","checkOptions","concatGrps","possibleOptions","foundOptions","_i","length","option","includes","CalculateOptions","options","sqr","Number","checkUniqueOptions","thisOptions","concatAllGrps","reduce","prev","curr","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","CalculateUniqueOptions","uniqueOptions","rowOptions","colOptions","sqrOptions","splice","IsSolutionCorrect","checkRows","checkColumns","checkSquares","containsOneToNine","_loop","columnIndex","v","_ret","_loop2","squareIndex","filter","x","slice","flat","_ret2","numbers","i","iterateSolution1","iterLeft","arguments","optionsGrid","updates","itemIndex","iterateSolution2","optionsOptionsGrid","rowify","output","isSolCorrect","BruteSolve","iterations","maxIterations","iterativelyFilledGrid","recursivelyFillGrid","_ref","_ref2","slicedToArray","table","Error","optionsForElement","checkGrid","returnedVal","nextCoordinate","cloneDeep","gridClone","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","App","bruteSolver","BruteSolver","isSolutionCorrect","state","gridOptions","setState","solve","components_Header","components_MainWindow","components_RightBox","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2f03fe89.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <h1 className=\"title\">Sudoku!</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass SudokuGrid extends Component {\r\n  constructor() {\r\n    super();\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  //updates grid when user inputs value\r\n  handleChange(e, row, col) {\r\n    e.preventDefault();\r\n    console.log(e.target.value);\r\n    const vert = row;\r\n    const horiz = col;\r\n\r\n    let validChar = /^$|[1-9]/\r\n    if (validChar.test(e.target.value)) {\r\n      this.props.updateGrid(vert, horiz, e.target.value);\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.newGrid();\r\n  }\r\n\r\n  clickHandler(e) {\r\n    e.target.select();\r\n  }\r\n\r\n  col(row, grid) {\r\n    return [...Array(9).keys()].map((col) => (\r\n      <textarea className=\"box\" maxLength=\"1\" onClick={this.clickHandler} key={`col-${col + 1}`} value={grid[row][col]} onChange={(e) => this.handleChange(e, row, col)} style={{ color: this.props.solved ? \"Green\" : \"\" }}></textarea>\r\n    ))\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.props;\r\n\r\n    return (\r\n      <div className=\"sudokuBoxContainer\">\r\n        <div className=\"sudokuBox\">\r\n          {[...Array(9).keys()].map((row) => (\r\n            <div className=\"row\" key={`row-${row + 1}`}>\r\n              {this.col(row, grid)}\r\n            </div>\r\n          ))\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SudokuGrid;","import React, { Component } from 'react';\r\nimport SudokuGrid from './SudokuGrid';\r\n\r\nclass MainWindow extends Component {\r\n  render() {\r\n    let checkSolutionMessage;\r\n    if (this.props.solved) {\r\n      checkSolutionMessage = <p>Solution is Correct!</p>;\r\n    } else if (this.props.solved === false) {\r\n      checkSolutionMessage = <p>That's not a valid solution! :(</p>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"window\">\r\n        <SudokuGrid\r\n          grid={this.props.grid}\r\n          solved={this.props.solved}\r\n          newGrid={this.props.newGrid}\r\n          updateGrid={this.props.updateGrid}\r\n        />\r\n        <div className=\"grid-choices\">\r\n          <p>Scenarios:\r\n        <button onClick={() => this.props.emptyGrid()}>Empty Grid</button>\r\n            <button onClick={() => this.props.newGrid()}>New Grid 1</button>\r\n            <button onClick={() => this.props.newGrid2()}>New Grid 2</button>\r\n            <button onClick={() => this.props.newGrid3()}>New Grid 3</button>\r\n          </p>\r\n        </div>\r\n        <div className=\"check-sol-button\">\r\n          <button onClick={() => this.props.checkSolution()}>Check Solution</button>\r\n          {checkSolutionMessage}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default MainWindow;\r\n","import React, { Component } from 'react';\r\n\r\nclass RightBox extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"rightBox\">\r\n        <p>Console Commands:\r\n          <button onClick={() => this.props.calcOptions()}>Calculate Options</button>\r\n          <button onClick={() => this.props.calcUniqueOptions()}>Calculate Unique Options</button>\r\n        </p>\r\n        <div className=\"sol-1-buttons\">\r\n          <p>Method 1:\r\n            <button onClick={() => this.props.solveSol1()}>x1</button>\r\n            <button onClick={() => this.props.solveSol1(5)}>x5</button>\r\n            <button onClick={() => this.props.solveSol1(10)}>x10</button>\r\n          </p>\r\n        </div>\r\n        <div className=\"sol-2-buttons\">\r\n          <p>Method 2:\r\n            <button onClick={() => this.props.solveSol2()}>x1</button>\r\n            <button onClick={() => this.props.solveSol2(5)}>x5</button>\r\n            <button onClick={() => this.props.solveSol2(10)}>x10</button>\r\n          </p>\r\n        </div>\r\n        <div className=\"full-sol-button\">\r\n          <button onClick={() => this.props.attemptFullSolve(10)}>Attempt Full Solve (M1+2)</button>\r\n        </div>\r\n        <div className=\"brute-sol-button\">\r\n          <button onClick={() => this.props.bruteSolve()}>Brute Solve</button>\r\n        </div>\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\nexport default RightBox;\r\n","export function CalculateOptions(grid) {\r\n  const options = [];\r\n\r\n  for (let rowIndex in grid) {\r\n    let row = grid[rowIndex]; // whole row\r\n\r\n    for (let colIndex in grid[rowIndex]) {\r\n      if (grid[rowIndex][colIndex] === \"\") {\r\n        let col = column(colIndex, grid); // whole column\r\n        let sqr = square(rowIndex, colIndex, grid); // whole square\r\n\r\n        let concatGrps = [].concat(row).concat(col).concat(sqr);\r\n\r\n        options[Number(rowIndex) * 9 + Number(colIndex)] = checkOptions(concatGrps); //needs to be array of options\r\n\r\n      }\r\n      else {\r\n        options[Number(rowIndex) * 9 + Number(colIndex)] = [];\r\n      }\r\n    }\r\n  };\r\n\r\n  return options;\r\n}\r\n\r\n// returns array containing column values from grid at [colIndex]\r\nfunction column(colIndex, grid) {\r\n  let col = [];\r\n  for (let rowIndex in grid) {\r\n    col.push(grid[rowIndex][colIndex]);\r\n  }\r\n  return col;\r\n}\r\n\r\n// returns array containing values in the square of the value at [rowIndex][colIndex]\r\nfunction square(rowIndex, colIndex, grid) {\r\n  let sqrWidth = 3;\r\n  let sqr = new Array(sqrWidth * sqrWidth).fill(\"\");\r\n\r\n  let newSqr = sqr.map((val, sqrIndex) => {\r\n    let rowId = Math.floor(sqrIndex / sqrWidth) + sqrWidth * Math.floor(rowIndex / sqrWidth);\r\n    let colId = sqrIndex - sqrWidth * Math.floor(sqrIndex / sqrWidth) + sqrWidth * Math.floor(colIndex / sqrWidth);\r\n    return grid[rowId][colId];\r\n  });\r\n\r\n  return newSqr;\r\n}\r\n\r\n// assumes possible values are 1 - 9\r\nfunction checkOptions(concatGrps) {\r\n  let possibleOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n  let foundOptions = [];\r\n\r\n  for (let option of possibleOptions) {\r\n    if (!concatGrps.includes(option)) {\r\n      foundOptions.push(option);\r\n    }\r\n  }\r\n  return foundOptions;\r\n}\r\n\r\nexport default CalculateOptions;\r\n","export function CalculateUniqueOptions(options) {\r\n  const uniqueOptions = [];\r\n\r\n  for (let rowIndex in options) {\r\n    let row = options[rowIndex]; // whole row\r\n\r\n    for (let colIndex in options[rowIndex]) {\r\n      //console.log(colIndex);\r\n      if (options[rowIndex][colIndex] !== []) {\r\n        let rowOptions = [...row]; // copy of whole row\r\n        let colOptions = column(colIndex, options); // whole column\r\n        let sqrOptions = square(rowIndex, colIndex, options); // whole square\r\n\r\n        //console.log(`${rowIndex},${colIndex} :  ${sqrOptions}`);\r\n        rowOptions.splice(colIndex, 1);\r\n        colOptions.splice(rowIndex, 1);\r\n        sqrOptions.splice((colIndex - 3 * Math.floor(colIndex / 3) + 3 * rowIndex - 9 * Math.floor(rowIndex / 3)), 1);\r\n        //console.log(`${rowIndex},${colIndex} :  ${sqrOptions}`);\r\n\r\n        uniqueOptions[Number(rowIndex) * 9 + Number(colIndex)] = (\r\n          checkUniqueOptions(rowOptions, options[rowIndex][colIndex]) //needs to be array of uniqueOptions\r\n            .concat(checkUniqueOptions(colOptions, options[rowIndex][colIndex]))\r\n            .concat(checkUniqueOptions(sqrOptions, options[rowIndex][colIndex])).splice(0, 1)\r\n        );\r\n\r\n      }\r\n      else {\r\n        uniqueOptions[Number(rowIndex) * 9 + Number(colIndex)] = [];\r\n      }\r\n    }\r\n  };\r\n  //console.table(uniqueOptions);\r\n  return uniqueOptions;\r\n}\r\n\r\n// returns array containing column values from grid at [colIndex]\r\nfunction column(colIndex, options) {\r\n  let col = [];\r\n  for (let rowIndex in options) {\r\n    col.push(options[rowIndex][colIndex]);\r\n  }\r\n  return col;\r\n}\r\n\r\n// returns array containing values in the square of the value at [rowIndex][colIndex]\r\nfunction square(rowIndex, colIndex, options) {\r\n  let sqrWidth = 3;\r\n  let sqr = new Array(sqrWidth * sqrWidth).fill(0);\r\n\r\n  let newSqr = sqr.map((val, sqrIndex) => {\r\n    let rowId = Math.floor(sqrIndex / sqrWidth) + sqrWidth * Math.floor(rowIndex / sqrWidth);\r\n    let colId = sqrIndex - sqrWidth * Math.floor(sqrIndex / sqrWidth) + sqrWidth * Math.floor(colIndex / sqrWidth);\r\n    return options[rowId][colId] || 0;\r\n  });\r\n  return newSqr;\r\n}\r\n\r\n// assumes possible values are 1 - 9\r\nfunction checkUniqueOptions(concatGrps, thisOptions) {\r\n  let foundOptions = [];\r\n  let concatAllGrps = concatGrps.reduce((prev, curr) => prev.concat(curr));\r\n\r\n  for (let option of thisOptions) {\r\n    if (!concatAllGrps.includes(option)) {\r\n      foundOptions.push(option);\r\n    }\r\n  }\r\n  return foundOptions;\r\n}\r\n\r\nexport default CalculateUniqueOptions;\r\n","// 'checkGrid should be called - outputs a boolean confirmation if the sudoku grid meets completion criteria.\r\n\r\nclass IsSolutionCorrect {\r\n    checkGrid(grid) {\r\n        return this.checkRows(grid) && this.checkColumns(grid) && this.checkSquares(grid);\r\n    }\r\n    \r\n    checkRows(grid) {\r\n        for (let rowIndex = 0; rowIndex < 9; rowIndex++) {\r\n            let row = grid[rowIndex];\r\n            if (!this.containsOneToNine(row)) { return false }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    checkColumns(grid) {\r\n        for (let columnIndex = 0; columnIndex < 9; columnIndex++) {\r\n            let column = grid.map(row => row[columnIndex]);\r\n            if (!this.containsOneToNine(column)) { return false }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    checkSquares(grid) {\r\n        for (let squareIndex = 0; squareIndex < 9; squareIndex++) {\r\n            let square = grid.filter((val, rowIndex) => Math.floor(rowIndex / 3) === Math.floor(squareIndex / 3))\r\n                             .map(x => x.slice((squareIndex % 3) * 3, (squareIndex % 3) * 3 + 3))\r\n                             .flat();\r\n            if (!this.containsOneToNine(square)) { return false }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    containsOneToNine(numbers) {\r\n        for (let i = 1; i <= 9; i++) {\r\n            if (!numbers.includes(i)) { return false }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default IsSolutionCorrect","import CalculateOptions from './CalculateOptions';\r\nimport CalculateUniqueOptions from './CalculateUniqueOptions';\r\n\r\nexport function iterateSolution1(grid, iterLeft = 1) {\r\n  const optionsGrid = CalculateOptions(grid);\r\n  const updates = {};\r\n  iterLeft -= 1;\r\n  console.log(`Run Sol 1. Iterations left: ${iterLeft}`);\r\n\r\n  // determines boxes that only have 1 option possible based on location\r\n  for (let itemIndex in optionsGrid) {\r\n    let options = optionsGrid[itemIndex];\r\n    if (options.length === 1) {\r\n      updates[itemIndex] = options[0];\r\n    };\r\n  }\r\n\r\n  // update grid\r\n  if (Object.keys(updates).length === 0) {\r\n    return {\r\n      grid: grid,\r\n      iterLeft: iterLeft\r\n    } // stops iterations if there are no more updatable values\r\n  }\r\n  grid = updateGrid(grid, updates);\r\n\r\n  // iterate till iterLeft 0\r\n  if (iterLeft >= 1) {\r\n    return iterateSolution1(grid, iterLeft)\r\n  }\r\n  else {\r\n    return {\r\n      grid: grid,\r\n      iterLeft: iterLeft\r\n    };\r\n  }\r\n}\r\n\r\nexport function iterateSolution2(grid, iterLeft = 1) {\r\n  const optionsGrid = CalculateOptions(grid);\r\n  const optionsOptionsGrid = CalculateUniqueOptions(rowify(optionsGrid));\r\n  const updates = {};\r\n  iterLeft -= 1;\r\n  console.log(`Run Sol 2. Iterations left: ${iterLeft}`);\r\n\r\n  // determines boxes that only have 1 option possible based on location\r\n  for (let itemIndex in optionsOptionsGrid) {\r\n    let options = optionsOptionsGrid[itemIndex];\r\n    if (options.length === 1) {\r\n      updates[itemIndex] = options[0];\r\n    };\r\n  }\r\n\r\n  // update grid\r\n  if (Object.keys(updates).length === 0) {\r\n    return {\r\n      grid: grid,\r\n      iterLeft: iterLeft\r\n    } // stops iterations if there are no more updatable values\r\n  }\r\n\r\n  grid = updateGrid(grid, updates);\r\n\r\n  // iterate\r\n  if (iterLeft >= 1) {\r\n    return iterateSolution2(grid, iterLeft)\r\n  }\r\n  else {\r\n    return {\r\n      grid: grid,\r\n      iterLeft: iterLeft\r\n    };\r\n  }\r\n}\r\n\r\n// update grid\r\nfunction updateGrid(grid, updates) {\r\n  for (let itemIndex in updates) {\r\n    let rowIndex = Math.floor(itemIndex / 9);\r\n    let colIndex = itemIndex - rowIndex * 9;\r\n    console.log(`Changing ${rowIndex}:${colIndex},(${itemIndex})   :  ${updates[itemIndex]}`)\r\n    grid[rowIndex][colIndex] = updates[itemIndex];\r\n  }\r\n  return grid;\r\n}\r\n\r\n// needed because of the structural diff. between grid and optionsGrid - needs to be commonised later.\r\n// will probably need a 'row' function in CalculateOptions as exists for col and sqr.\r\nexport function rowify(optionsGrid) {\r\n  let output = new Array(9).fill(\"\").map(() => new Array(9).fill(\"\").map(() => \"\"));\r\n  for (let rowIndex in output) {\r\n    for (let colIndex in output) {\r\n      output[rowIndex][colIndex] = optionsGrid[Number(colIndex) + Number(rowIndex) * 9];\r\n    }\r\n  }\r\n  //console.log(output)\r\n  return output;\r\n}\r\n\r\nexport default { iterateSolution1, iterateSolution2, rowify };\r\n\r\n// test case https://www.websudoku.com/?level=1&set_id=9052917801\r\n","import CalculateOptions from './CalculateOptions';\r\nimport IsSolutionCorrect from './IsSolutionCorrect';\r\n\r\nconst isSolCorrect = new IsSolutionCorrect();\r\n\r\nclass BruteSolve {\r\n  constructor() {\r\n    this.iterations = 0;\r\n    this.maxIterations = 10000;\r\n  }\r\n\r\n  solve(grid) {\r\n    this.iterations = 0;\r\n    let iterativelyFilledGrid = this.recursivelyFillGrid(grid);\r\n    if (iterativelyFilledGrid) {\r\n      return iterativelyFilledGrid;\r\n    } else {\r\n      return grid;\r\n    }\r\n  }\r\n\r\n  recursivelyFillGrid(grid, [row, col] = [0, 0]) {\r\n\r\n    this.iterations++;\r\n\r\n    if (this.iterations > this.maxIterations) {\r\n      console.table(grid);\r\n      console.log(`iterations: ${this.iterations}`)\r\n      throw new Error('Unsolvable');\r\n    }\r\n\r\n    let options = CalculateOptions(grid);\r\n    let optionsForElement = options[row * 9 + col];\r\n\r\n    if (options.filter((x) => x.length !== 0).length + grid.flat().filter((x) => x.length !== 0).length < 81) return false;\r\n\r\n    if (row === 8 && col === 8) {\r\n      if (grid[row][col] === \"\") grid[row][col] = options[row * 9 + col];\r\n      console.log(`Completed in : ${this.iterations} iterations.`);\r\n      if (isSolCorrect.checkGrid(grid)) return grid;\r\n      else return false\r\n    }\r\n\r\n    //next coordinate if the current one is filled. Branch out of possible options if unfilled.\r\n    if (optionsForElement.length === 0) {\r\n\r\n      if (grid[row][col] === \"\") return false;\r\n      let returnedVal = this.recursivelyFillGrid(grid, this.nextCoordinate(row, col));\r\n      if (returnedVal) return returnedVal;\r\n\r\n    } else {\r\n      for (let option of optionsForElement) {\r\n\r\n        // console.log(`trying ${option} of ${optionsForElement} at : [${[row, col]}]`)\r\n\r\n        let newGrid = this.cloneDeep(grid);\r\n        newGrid[row][col] = option;\r\n\r\n        let returnedVal = this.recursivelyFillGrid(newGrid, this.nextCoordinate(row, col));\r\n        if (returnedVal) return returnedVal;\r\n\r\n        // console.log(`branch ${option} of ${optionsForElement} at : [${[row, col]}] failed`)\r\n\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  nextCoordinate(row, col) {\r\n    if (col < 8) {\r\n      col++;\r\n    } else if (row < 8) {\r\n      row++;\r\n      col = 0;\r\n    }\r\n    return [row, col];\r\n  }\r\n\r\n  cloneDeep(grid) {\r\n    let gridClone = [];\r\n    for (let row of grid) {\r\n      gridClone.push([...row]);\r\n    }\r\n    return gridClone;\r\n  }\r\n\r\n  // update grid //copied from solver.js. Needs consolidation later.\r\n  updateGrid(grid, updates) {\r\n    for (let itemIndex in updates) {\r\n      let rowIndex = Math.floor(itemIndex / 9);\r\n      let colIndex = itemIndex - rowIndex * 9;\r\n      console.log(`Changing ${rowIndex}:${colIndex},(${itemIndex})   :  ${updates[itemIndex]}`)\r\n      grid[rowIndex][colIndex] = updates[itemIndex];\r\n    }\r\n    return grid;\r\n  }\r\n}\r\n\r\nexport default BruteSolve","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport MainWindow from './components/MainWindow';\r\nimport RightBox from './components/RightBox';\r\nimport CalculateOptions from './components/CalculateOptions';\r\nimport CalculateUniqueOptions from './components/CalculateUniqueOptions';\r\nimport IsSolutionCorrect from './components/IsSolutionCorrect';\r\nimport { iterateSolution1, iterateSolution2, rowify } from './components/Solver';\r\nimport BruteSolver from './components/BruteSolver';\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.emptyGrid = this.emptyGrid.bind(this);\r\n    this.newGrid = this.newGrid.bind(this);\r\n    this.newGrid2 = this.newGrid2.bind(this);\r\n    this.newGrid3 = this.newGrid3.bind(this);\r\n    this.updateGrid = this.updateGrid.bind(this);\r\n    this.calcOptions = this.calcOptions.bind(this);\r\n    this.calcUniqueOptions = this.calcUniqueOptions.bind(this);\r\n    this.solveSol1 = this.solveSol1.bind(this);\r\n    this.solveSol2 = this.solveSol2.bind(this);\r\n    this.attemptFullSolve = this.attemptFullSolve.bind(this);\r\n    this.checkSolution = this.checkSolution.bind(this);\r\n    this.bruteSolve = this.bruteSolve.bind(this);\r\n\r\n    this.bruteSolver = new BruteSolver();\r\n    this.isSolutionCorrect = new IsSolutionCorrect();\r\n    //get initial state\r\n    this.state = {\r\n      grid: new Array(9).fill(\"\").map(() => new Array(9).fill(\"\").map(() => \"\")),\r\n      gridOptions: [],\r\n      uniqueOptions: [],\r\n      solved: null\r\n    };\r\n  }\r\n\r\n  emptyGrid() {\r\n    //\r\n    const grid = [\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\r\n    ]\r\n\r\n    let solved;\r\n\r\n    this.setState({ grid });\r\n    this.setState({ solved });\r\n  }\r\n\r\n  // creates a 9x9 grid and populates it with data from ??\r\n  newGrid() {\r\n    //\r\n    const grid = [\r\n      [2, \"\", 9, \"\", 8, \"\", 5, \"\", \"\"],\r\n      [\"\", \"\", 4, 7, 6, 9, \"\", \"\", \"\"],\r\n      [3, \"\", \"\", \"\", 1, 2, \"\", 4, \"\"],\r\n      [\"\", \"\", 3, 6, \"\", \"\", \"\", 5, 4],\r\n      [\"\", 4, \"\", \"\", \"\", \"\", \"\", 8, \"\"],\r\n      [8, 5, \"\", \"\", \"\", 7, 6, \"\", \"\"],\r\n      [\"\", 2, \"\", 8, 7, \"\", \"\", \"\", 9],\r\n      [\"\", \"\", \"\", 1, 9, 6, 2, \"\", \"\"],\r\n      [\"\", \"\", 5, \"\", 4, \"\", 1, \"\", 8]\r\n    ]\r\n\r\n    let solved;\r\n\r\n    this.setState({ grid });\r\n    this.setState({ solved });\r\n  }\r\n\r\n  newGrid2() {\r\n    //\r\n    const grid = [\r\n      [\"\", \"\", \"\", 6, 7, \"\", \"\", 4, \"\"],\r\n      [1, \"\", \"\", \"\", \"\", \"\", \"\", 3, 6],\r\n      [\"\", 4, 2, 1, \"\", \"\", \"\", \"\", \"\"],\r\n      [4, \"\", \"\", 7, \"\", \"\", \"\", \"\", \"\"],\r\n      [\"\", \"\", 5, \"\", \"\", \"\", 3, \"\", \"\"],\r\n      [\"\", \"\", \"\", \"\", \"\", 2, \"\", \"\", 8],\r\n      [\"\", \"\", \"\", \"\", \"\", 1, 6, 7, \"\"],\r\n      [5, 8, \"\", \"\", \"\", \"\", \"\", \"\", 3],\r\n      [\"\", 3, \"\", \"\", 2, 9, \"\", \"\", \"\"]\r\n    ]\r\n\r\n    let solved;\r\n\r\n    this.setState({ grid });\r\n    this.setState({ solved });\r\n  }\r\n\r\n  newGrid3() {\r\n    //\r\n    const grid = [\r\n      [8, \"\", 3, \"\", \"\", \"\", 2, 1, 9],\r\n      [9, \"\", 5, \"\", 1, \"\", 7, \"\", \"\"],\r\n      [\"\", 6, 1, 9, \"\", \"\", 3, \"\", \"\"],\r\n      [2, 3, 4, 5, 6, 1, 9, \"\", \"\"],\r\n      [1, 8, 9, 4, 3, 7, 5, 2, 6],\r\n      [\"\", \"\", \"\", \"\", \"\", 9, 1, 4, 3],\r\n      [\"\", \"\", \"\", \"\", \"\", 4, 8, 9, \"\"],\r\n      [\"\", \"\", 8, \"\", 9, \"\", 6, \"\", 5],\r\n      [\"\", 9, 2, \"\", \"\", \"\", 4, \"\", 1]\r\n    ]\r\n\r\n    let solved;\r\n\r\n    this.setState({ grid });\r\n    this.setState({ solved });\r\n  }\r\n\r\n  updateGrid(vert, horiz, value) {\r\n    const grid = [...this.state.grid];\r\n    if (value === \"\") grid[vert][horiz] = value;\r\n    else grid[vert][horiz] = 1 * value;\r\n\r\n    let solved;\r\n\r\n    this.setState({ grid });\r\n    this.setState({ solved });\r\n  }\r\n\r\n  calcOptions() {\r\n    const gridOptions = CalculateOptions(this.state.grid);\r\n    this.setState({ gridOptions });\r\n    console.table(gridOptions);\r\n  }\r\n\r\n  calcUniqueOptions() {\r\n    const gridOptions = CalculateOptions(this.state.grid);\r\n    const uniqueOptions = CalculateUniqueOptions(rowify(gridOptions));\r\n    this.setState({ uniqueOptions });\r\n    console.table(uniqueOptions);\r\n  }\r\n\r\n  solveSol1(iterations) {\r\n    const { grid } = iterateSolution1(this.state.grid, iterations);\r\n    //console.log(iterLeft);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  solveSol2(iterations) {\r\n    const { grid } = iterateSolution2(this.state.grid, iterations);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  attemptFullSolve(iterations) {\r\n    for (let i = 0; i < iterations; i++) {\r\n      this.solveSol1(10);\r\n      this.solveSol2(10);\r\n      //check if grid is solved and break;\r\n    };\r\n  }\r\n\r\n  bruteSolve() {\r\n    console.log(this.bruteSolver.solve(this.state.grid));\r\n    // const { grid } = this.bruteSolver.solve(this.state.grid);\r\n    // this.setState({ grid });\r\n  }\r\n\r\n  checkSolution() {\r\n    let solved = false;\r\n    if (this.isSolutionCorrect.checkGrid(this.state.grid)) {\r\n      console.log(\"The solution is correct!\")\r\n      solved = true;\r\n    } else {\r\n      console.log(\"This is not the correct solution!\")\r\n    }\r\n    this.setState({ solved });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <div className=\"body\">\r\n          <MainWindow\r\n            grid={this.state.grid}\r\n            solved={this.state.solved}\r\n            updateGrid={this.updateGrid}\r\n            emptyGrid={this.emptyGrid}\r\n            newGrid={this.newGrid}\r\n            newGrid2={this.newGrid2}\r\n            newGrid3={this.newGrid3}\r\n            checkSolution={this.checkSolution}\r\n          />\r\n          <RightBox\r\n            calcOptions={this.calcOptions}\r\n            calcUniqueOptions={this.calcUniqueOptions}\r\n            solveSol1={this.solveSol1}\r\n            solveSol2={this.solveSol2}\r\n            attemptFullSolve={this.attemptFullSolve}\r\n            bruteSolve={this.bruteSolve}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}